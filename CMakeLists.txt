cmake_minimum_required(VERSION 3.00)
project(DeveloperTools)
include (GNUInstallDirs)
find_package(CURL REQUIRED) 
include_directories(${CURL_INCLUDE_DIR})
if (WIN32)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/Windows) 
    file(COPY ${CMAKE_BINARY_DIR}/DLL/ DESTINATION ${CMAKE_BINARY_DIR}/build/Windows)
    file(COPY ${CMAKE_BINARY_DIR}/src/Scripts DESTINATION ${CMAKE_BINARY_DIR}/build/Windows)
endif (WIN32)
if (UNIX)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/Linux)
endif (UNIX)
set(CMAKE_CXX_STANDARD 20)
# set(CMAKE_CXX_STANDARD_LIBRARIES "-static-libgcc -static-libstdc++ -lcurl  ${CMAKE_CXX_STANDARD_LIBRARIES}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20")
set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++ -lcurl")
set(SOURCE_FILES ${CMAKE_BINARY_DIR}/src/DeveloperTools.cpp ${CMAKE_BINARY_DIR}/src/DeveloperTools.hpp)
add_executable(DeveloperTools ${SOURCE_FILES})
add_compile_options(-w)
add_compile_options(-lcurl)
target_sources(DeveloperTools PRIVATE ${CMAKE_BINARY_DIR}/src/resource.rc)
target_link_libraries(DeveloperTools ${CMAKE_EXE_LINKER_FLAGS})
message(CMAKE_SYSTEM_NAME)