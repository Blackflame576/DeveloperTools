cmake_minimum_required(VERSION 3.00)
project(DeepForgeToolset)
include (GNUInstallDirs)
set(CMAKE_CXX_COMPILER "g++")
find_package(CURL REQUIRED) 
include_directories(${CURL_INCLUDE_DIR})
find_package (SQLite3 REQUIRED)
include_directories(${SQLite3_INCLUDE_DIRS})

if (WIN32)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/Windows) 
    message("ðŸ”¥ Copying folder of DLL to build/Windows ...")
    file(COPY ${CMAKE_BINARY_DIR}/DLL/ DESTINATION ${CMAKE_BINARY_DIR}/build/Windows)
    message("âœ… Copying folder of DLL to build/Windows was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of Scripts to build/Windows ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/Scripts DESTINATION ${CMAKE_BINARY_DIR}/build/Windows)
    message("âœ… Copying folder of Scripts to build/Windows was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of utils to build/Windows ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/utils DESTINATION ${CMAKE_BINARY_DIR}/build/Windows)
    message("âœ… Copying folder of utils to build/Windows was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of DB to build/Windows ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/DB DESTINATION ${CMAKE_BINARY_DIR}/build/Windows)
    message("âœ… Copying folder of DB to build/Windows was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of locale to build/Windows ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/locale DESTINATION ${CMAKE_BINARY_DIR}/build/Windows)
    message("âœ… Copying folder of locale to build/Windows was successfully.")
    message("==================================")
elseif(APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -isystem \"${JSONCPP_INCLUDE_DIR}\"")           
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/MacOS)
    message("ðŸ”¥ Copying folder of Scripts to build/MacOS ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/Scripts DESTINATION ${CMAKE_BINARY_DIR}/build/MacOS)
    message("âœ… Copying folder of Scripts to build/MacOS was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of utils to build/MacOS ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/utils DESTINATION ${CMAKE_BINARY_DIR}/build/MacOS)
    message("âœ… Copying folder of utils to build/MacOS was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of locale to build/MacOS ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/locale DESTINATION ${CMAKE_BINARY_DIR}/build/MacOS)
    message("âœ… Copying folder of locale to build/MacOS was successfully.")
    message("==================================")
elseif(UNIX)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build/Linux)
    message("ðŸ”¥ Copying folder of Scripts to build/Linux ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/Scripts DESTINATION ${CMAKE_BINARY_DIR}/build/Linux)
    message("âœ… Copying folder of Scripts to build/Linux was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of utils to build/Linux ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/utils DESTINATION ${CMAKE_BINARY_DIR}/build/Linux)
    message("âœ… Copying folder of utils to build/Linux was successfully.")
    message("==================================")
    message("ðŸ”¥ Copying folder of locale to build/Linux ...")
    file(COPY ${CMAKE_BINARY_DIR}/src/locale DESTINATION ${CMAKE_BINARY_DIR}/build/Linux)
    message("âœ… Copying folder of locale to build/Linux was successfully.")
    message("==================================")
endif()
include_directories(${CMAKE_BINARY_DIR}/src/include)
set(CMAKE_CXX_STANDARD 20)
# set(CMAKE_CXX_STANDARD_LIBRARIES "-static-libgcc -static-libstdc++ -lcurl  ${CMAKE_CXX_STANDARD_LIBRARIES}")
if (WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20")
    set(CMAKE_EXE_LINKER_FLAGS "-lcurl -ljsoncpp -lsqlite3")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20")
    set(CMAKE_EXE_LINKER_FLAGS "-lcurl -ljsoncpp -lsqlite3")
endif()

set(SOURCE_FILES ${CMAKE_BINARY_DIR}/src/DeepForgeToolset.cpp ${CMAKE_BINARY_DIR}/src/DeepForgeToolset.hpp src/DatabaseConnect.cpp)
add_executable(DeepForgeToolset ${SOURCE_FILES})
add_compile_options(-W)
target_sources(DeepForgeToolset PRIVATE ${CMAKE_BINARY_DIR}/src/resource.rc)
if (SQLITE3_FOUND)
    include_directories(${SQLite3_INCLUDE_DIR})
    target_link_libraries(DeepForgeToolset ${CMAKE_EXE_LINKER_FLAGS} ${SQLite3_LIBRARY} )
endif (SQLITE3_FOUND)