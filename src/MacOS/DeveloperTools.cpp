// –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
#include <iostream>
#include <cstdio>
#include <string>
#include "AppInstaller.hpp"
#include <map>
#include "Logger.hpp"
#include <regex>
#include <fstream>

using namespace std;
using funct_t = void(*)(void);
using namespace AppInstaller;
using namespace Logger;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
string GetNameDistribution() {
    if (OS_NAME == "Windows") {
        ifstream stream("/etc/os-release");
        string line;
        regex nameRegex("^NAME=\"(.*?)\"$");
        smatch match;
        string name;
        while (getline(stream,line)) {
            if (regex_search(line,match,nameRegex)) {
                name = match[1].str();
                break;
            }
        }
        return name;
    } 
}

// –§—É–Ω–∫—Ü–∏–∏
class Main {
    public:
        void CommandManager() {
            string InstallTools;
            cout << "1. –í—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä DeveloperTools –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è" << endl;
            cout << "2. –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–æ–≤ DeveloperTools" << endl;
            cout << "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã DeveloperTools" << endl;
            cout << "4. –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞" << endl;
            cout << "5. –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" << endl;
            cout << "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 2):";
            getline(cin,InstallTools);
            if (InstallTools == "1") {
                ReadySet();
            }
            else if (InstallTools == "2" or InstallTools.empty()) {
                ManualSelection();
            }
            else if (InstallTools == "3") {
                InstallAllPackages();
            }
            else if (InstallTools == "4") {
                SearchPackages();
            }
            else if (InstallTools == "5") {
                bool isExit = false;
                cout << "üö™–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ—Ç)?";
                getline(cin, Answer);
                isExit = CheckAnswer(Answer);
                exit(0);
            }
            else {
                ManualSelection();
            }

        }
        void ManualSelection() {
            TypeInstall = "hidden";
            map<int,string> EnumeratePackages;
            for (int i = 1;const auto &element:Packages) {
                EnumeratePackages.insert(pair<int,string>(i,element.first));
                cout << i << ". "<< element.first << endl;
                i++;
            }
            cout << "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏(—á–µ—Ä–µ–∑ ,):";
            getline(cin,SelectPackages);
            string delimiter = ",";
            size_t pos = 0;
            string token;
            while ((pos = SelectPackages.find(delimiter)) != string::npos) {
                token = SelectPackages.substr(0, pos);
                string name = EnumeratePackages[stoi(token)];
                Packages[name]();
                SelectPackages.erase(0, pos + delimiter.length());
            }
            string NamePackage = EnumeratePackages[stoi(SelectPackages)];
            Packages[NamePackage]();
            CommandManager();
        }
        void ReadySet() {
            for(int i = 1;i < Languages.size() + 1;i++){
                cout << i << ". " << Languages[i] << endl;
            }
            cout << "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:";
            getline(cin,LangReadySet);
            for(int i = 1;i < DevelopmentPacks.size();i++){
                if (LangReadySet == to_string(i)) {
                    DevelopmentPacks[i]();
                }
            }
            CommandManager();
        }
        void InstallAllPackages() {
            TypeInstall = "hidden";
            for (const auto &element:Packages) {
                string name = element.first;
                cout << name << ";";
            }
            cout << "" << endl;
            cout << "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–∞)?";
            getline(cin,Answer);
            Install = CheckAnswer(Answer);
            if (Install == true) {
                for (const auto &element:Packages) {
                    string name = element.first;
                    element.second();
                }
            }
            CommandManager();
        }
        string Last_str_word(const string& text)
        {
            int i = text.length() - 1;
            
            if (isspace(text[i]))
                while (isspace(text[i])) i--;
            
            while (i != 0 && !isspace(text[i])) --i;
            
            string lastword = text.substr(i + 1);
            return lastword;
        }
        void SearchPackages() {
            string SearchingPackage;
            bool isSearched = false;
            map<int,string> EnumeratePackages;
            cout << "‚ÑπÔ∏è –ò–º—è –ø–∞–∫–µ—Ç–∞:";
            getline(cin,SearchingPackage);
            SearchingPackage = to_lower(SearchingPackage);
            for (int i = 1;const auto &element:Packages) {
                string name = to_lower(element.first);
                if (SearchingPackage == name || name.rfind(SearchingPackage,0) == 0) {
                    isSearched = true;
                    EnumeratePackages.insert(pair<int,string>(i,element.first));
                    i++;
                }
            }
            if (isSearched == true) {
                cout << "üîé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:" << endl;
                for (const auto &element:EnumeratePackages) {
                    cout << element.first << ". " << element.second << endl;
                }
                cout << "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—ã—Ö–æ–¥):";
                getline(cin,SelectPackages);
                if (SelectPackages.empty() || SelectPackages == "\n") {
                    exit(0);
                }
                else {
                    if (EnumeratePackages.find(stoi(SelectPackages)) != EnumeratePackages.end()) {
                        string NameSelectedPackage = EnumeratePackages[stoi(SelectPackages)];
                        Packages[NameSelectedPackage]();
                    }
                    else {
                        cout << "üôà –ü–∞–∫–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç!" << endl;
                    }
                }
            }
            else {
                cout << "‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞." << endl;
            }
            CommandManager();
        }
        Main () {
        }
        ~Main () {
            
        };
    private:
        // void InstallBrew() {
        //     cout << "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Brew ..." << endl;
        //     system("bash ./Scripts/InstallBrew.sh");
        // }
        // void InstallSnap() {
        //     cout << "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Snap ..." << endl;
        // }
        
};

int main() {
    Main main;
    main.CommandManager();
    // AppInstaller::InstallKotlin();
    system("pause");
    return 0;
}